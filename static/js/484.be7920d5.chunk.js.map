{"version":3,"file":"static/js/484.be7920d5.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","pages/Contacts/Contacts_styled.js","components/ContactsForm/ContactForm_styled.jsx","components/ContactsForm/ContactForm.jsx","components/Filter/Filter_styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList_styled.jsx","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(filter.toLowerCase());\n    });\n  }\n);\n","import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  margin-top: 50px;\n  margin-left: 20px;\n  font-size: 36px;\n  font-weight: 700;\n`;\n\nexport const Subtitle = styled.h2`\n  margin-top: 30px;\n  margin-left: 20px;\n  font-size: 36px;\n  font-weight: 700;\n`;\n","import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const StyledForm = styled(Form)`\n    display: flex;\n    flex-direction: column;\n    width: 400px;\n    gap: 20px;\n    padding: 0 15px;\n`;\n\nexport const Label = styled.label`\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n    font-size: 20px;\n    color: #000;\n    margin-bottom: 15px;\n`;\n\nexport const StyledField = styled(Field)`\n  padding: 10px 10px;\n  border: 1px solid;\n  border-radius: 4px;\n  font-size: 16px;\n`;\n\nexport const ErrorMsg = styled(ErrorMessage)`\n    font-size: 16px;\n    color: red;\n`\n\nexport const Button = styled.button`\n  display: block;\n  width: 150px;\n  margin-left: auto;\n  margin-right: auto;\n  padding-top: 10px;\n  padding-bottom: 10px;\n\n  &:hover,\n  &:focus {\n    cursor: pointer;\n    transform: scale(1.1);\n  }\n`;\n\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  StyledForm,\n  Label,\n  StyledField,\n  ErrorMsg,\n  Button,\n} from './ContactForm_styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nconst formSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too short!')\n    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, {\n      message:\n        \"Name may contain only letters, apostrophe, dash and spaces.For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n    })\n    .required(),\n  number: Yup.string()\n    .min(7, 'Invalid phone!')\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      {\n        message:\n          'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n      }\n    )\n    .required(),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, actions) => {\n    const newContact = {\n      name: values.name,\n      number: values.number,\n    };\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n      )\n    ) {\n      alert(`${newContact.name} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact(newContact));\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n        filter: '',\n      }}\n      validationSchema={formSchema}\n      onSubmit={handleSubmit}\n    >\n      <StyledForm>\n        <Label>\n          Name\n          <StyledField name=\"name\" placeholder=\"Name\" />\n          <ErrorMsg name=\"name\" component=\"div\" />\n        </Label>\n        <Label>\n          Number\n          <StyledField name=\"number\" type=\"tel\" placeholder=\"Phone Number\" />\n          <ErrorMsg name=\"number\" component=\"div\" />\n        </Label>\n        <Button type=\"submit\">Add contact</Button>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const LabelFilter = styled.label`\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n    font-size: 20px;\n    color: #000;\n    margin-bottom: 15px;\n`;\n\nexport const InputFilter = styled.input`\n    width: 400px;\n    padding: 10px 10px;\n    border: 1px solid;\n    border-radius: 4px;\n    font-size: 16px;\n\n    &hover, &focus {\n    border: 3px solid blue;\n    }\n`;","import { useDispatch } from 'react-redux';\nimport { InputFilter, LabelFilter } from './Filter_styled';\nimport { getFilterContacts } from 'redux/contacts/FilterSlice';\n\nexport const Filter = ({ value }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <LabelFilter>\n      Find contacts by name\n      <InputFilter\n        name=\"filter\"\n        type=\"text\"\n        value={value}\n        onChange={e => dispatch(getFilterContacts(e.target.value))}\n      />\n    </LabelFilter>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n    display: flex;\n    flex-direction: column;\n    width: 600px;\n    padding: 12px;\n    border-radius: 4px;\n`;\n\nexport const ContactItem = styled.li`\n  display: flex;\n  gap: 20px;\n  padding: 10px;\n  margin-bottom: 5px;\n  font-size: 24px;\n  color: #000;\n`;\n\nexport const ButtonDel = styled.button`\n  display: block;\n  width: 100px;\n  margin-left: auto;\n  margin-right: auto;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  border-radius: 4px;\n\n  &:hover, &:focus {\n    cursor: pointer;\n    transform: scale(1.1);\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { List, ContactItem, ButtonDel } from './ContactList_styled';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <List>\n      {visibleContacts.map(contact => (\n        <ContactItem key={contact.id}>\n          <>\n            {contact.name} : {contact.number}\n          </>\n          <ButtonDel\n            type=\"button\"\n            onClick={() => dispatch(deleteContact(contact.id))}\n          >\n            Delete\n          </ButtonDel>\n        </ContactItem>\n      ))}\n    </List>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Subtitle, Title } from './Contacts_styled';\nimport { ContactForm } from 'components/ContactsForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactsList } from 'components/ContactList/ContactList';\nimport { Helmet } from 'react-helmet-async';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <Title>Phonebook</Title>\n      <ContactForm />\n      <Subtitle>Contacts</Subtitle>\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactsList />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","Title","styled","_templateObject","_taggedTemplateLiteral","Subtitle","_templateObject2","StyledForm","Form","Label","StyledField","Field","_templateObject3","ErrorMsg","ErrorMessage","_templateObject4","Button","_templateObject5","formSchema","Yup","shape","min","matches","message","required","number","ContactForm","dispatch","useDispatch","useSelector","_jsx","Formik","initialValues","validationSchema","onSubmit","values","actions","newContact","find","alert","concat","addContact","resetForm","children","_jsxs","placeholder","component","type","LabelFilter","InputFilter","Filter","_ref","value","onChange","e","getFilterContacts","target","List","ContactItem","ButtonDel","ContactsList","visibleContacts","map","_Fragment","onClick","deleteContact","id","useEffect","fetchContacts","Helmet"],"sourceRoot":""}